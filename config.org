#+TITLE: Emacs Configuration Org File
#+AUTHOR: yonggang.yyg
#+EMAIL: yygcode@gmail.com
#+DATE: 2017-12-20

* Header
  :PROPERTIES:
  :CUSTOM_ID: header
  :END:

This section has no actual effect, you can remove this section safely. It's just
used to generate some format code snippets to help auto-generated file config.el
satisfing the elisp file format requirement. Refer to follow links:
- CheckDoc: http://cedet.sourceforge.net/checkdoc.shtml
- EmacsWiKi: https://www.emacswiki.org/emacs/ElispAreaConventions
- Manual Simple Packages:
https://www.gnu.org/software/emacs/manual/html_node/elisp/Simple-Packages.html
#+BEGIN_SRC emacs-lisp
  ;;; ~/.emacs.d/config.el --- Emacs Configuration File

  ;; Copyright (C) 2017-2019 yanyg<yygcode@gmail.com>

  ;; Author: yonggang.yyg<yygcode@gmail.com>
  ;; Maintainer: yonggang.yyg<yygcode@gmail.com>
  ;; Keyword: Emacs Customize Org Literate
  ;; Homepage: https://ycode.org; http://ycode.org
  ;; URL: http://github.com/yygcode/.emacs.d

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation; either version 2 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program; see the file COPYING, if not see
  ;; <http://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; This file is auto-generated with org-babel.  The source is config.org.
  ;; DO NOT modify this file(~/.emacs.d/config.el) directly.
  ;; Please modify source file ~/.emacs.d/config.org.

  ;;; Code:

  ;;; Header timestamp
  (message "%s" (format-time-string "config.el begin %Y-%m-%d %H:%M:%S"
                                    (current-time)))
  ;; for startup time evaluate
  (defconst y/time-begin-seconds (float-time))
#+END_SRC

* Profiler
** Wrapper function
| Function            | Description                             |
|---------------------+-----------------------------------------|
| y/profile-esup      | Show esup startup profiler              |
| y/profile-tabulated | Show benchmark result in a sorted table |
| y/profile-tree      | Show benchmark result in a call-tree    |

** esup - startup profiler
[[file:init.el][init.el]] only set package archive and org, then use org-babel load config.org
to complete the rest(vast majority, main part) configurations. [[https://github.com/jschaf/esup][Esup]] provides
=esup-child-profile-require-level= deep to profile require statement, but it
can not deep to profile org-babel file. I write wrapper function =y/esup= to
analyze config.org time proportion.

- Esup GitHub: https://github.com/jschaf/esup
- Emacs Manual Profiling:
  https://www.gnu.org/software/emacs/manual/html_node/elisp/Profiling.html

#+BEGIN_SRC emacs-lisp
  ;; When call esup function, esup would start a new emacs process
  ;; with option -L/-l to load esup, but until now init.el does not
  ;; loaded, so we need load init.el first.
  ;; Load if in esup.
  (unless (boundp 'user-init-config)
    (let ((file (expand-file-name "init.el" user-emacs-directory)))
      (message "y/esup: Esup profiling, load %s now" file)
      (load-file file)))

  (use-package esup
    ;; :quelpa (esup :fetcher github :repo "jschaf/esup" :stable nil)
    :pin melpa
    :init
    ;; Current version only support 1, see bug
    ;; https://github.com/jschaf/esup/issues/53
    (setq esup-depth 1)
    (setq esup-user-init-file
          (expand-file-name (concat (file-name-base user-init-config) ".el")
                            user-emacs-directory)))

  (defun y/esup-advice-before(&optional init-file)
    "Set env EMACS_Y_INTERNAL_ESUP_PROFILER."
    (setenv "EMACS_Y_INTERNAL_ESUP_PROFILER" "y/esup"))

  (defun y/esup-advice-after(&optional init-file)
    "Clear env EMACS_Y_INTERNAL_ESUP_PROFILER."
    (setenv "EMACS_Y_INTERNAL_ESUP_PROFILER" nil)
    t)
  ;; set env before esup, and clear env after esup
  ;; because we esup config.el but we need load init.el too.
  ;;          (add-function :override completing-read-function
  ;;                        #'helm--completing-read-default)
  (advice-add 'esup :before #'y/esup-advice-before)
  (advice-add 'esup :after #'y/esup-advice-after)

  (defalias 'y/profile-esup 'esup
    "Profiling emacs startup time.")
#+END_SRC

** benchmark - profile execution time
*Notice* Import benchmark-init after package esup for esup enhancement.
- GitHub: https://github.com/dholm/benchmark-init-el
- Execute function in emacs to query result
  + benchmark-init/show-durations-tree
  + benchmark-init/show-durations-tabulated
- Default disable data collection after init. Execute to enable or disbale:
  + benchmark-init/activate
  + benchmark-init/deactivate
#+BEGIN_SRC emacs-lisp
  (use-package benchmark-init
    :init
    (benchmark-init/activate)
    :hook
    ;; To disable collection of benchmark data after init is done.
    (after-init . benchmark-init/deactivate))

  (defalias 'y/profile-tabulated 'benchmark-init/show-durations-tabulated
    "Profiling emacs startup time. Show result as a table.")
  (defalias 'y/profile-tree 'benchmark-init/show-durations-tree
    "Profiling emacs startup time. Show result as a tree.")
#+END_SRC

* Useful Routines
- Global useful routines;
- Misc routines;

#+BEGIN_SRC emacs-lisp
  (defun y/add-after-init-hook(func)
    "Add FUNC to after-init or frame-create hook."
    (if (daemonp)
        (add-hook 'after-make-frame-functions func)
      (add-hook 'after-init-hook func)))

  ;; require if exists
  (require 'y-misc nil t)
#+END_SRC
* Keybinds
** principle
- compat both in terminal and X windows
- High frequency operation gives a shorter key sequence
- Use default keybind if possible

** examples
- =(global-set-key "\C-x\C-p" #'previous-buffer)=: In selected window switch to
  previous buffer.
- =(global-set-key (kbd "C-x C-n") #'next-buffer)=: In seclected window switch
  to next buffer.
- =(mapc 'global-unset-key '([left] [right] [up] [down]))=: Remove arrow key
- =(global-unset-key (kbd "C-x <left>"))=: Remove Key sequence =C-x <left>=
- =(global-unset-key [24 left])=: Equivalent to the previous statament. 24 is
  charcode for C-x. Try *C-q C-x C-b C-x=* and watch echo area.

** command-frequency analysis
See Ergo stastics: http://ergoemacs.org/emacs/command-frequency.html.

keyfreq and command-log-mode are helpful packages:
- keyfreq: https://github.com/dacap/keyfreq
  + =M-x keyfreq-show=

- command-log-mode: https://github.com/lewang/command-log-mode
  + =M-x global-command-log-mode=
  + =M-x clm/toggle-command-log-buffer=

=open-dribble-file= is used to record all user input. =view-lossage= is used to
display last few input keystrokes and the command run.

=view-lossage= does not update when user input, write a wrapper to update
contents dynamically.

#+BEGIN_SRC emacs-lisp
  (use-package keyfreq
    :init
    (setq keyfreq-file (expand-file-name ".emacs.keyfreq" user-emacs-directory)
          keyfreq-file-lock (expand-file-name ".emacs.keyfreq.lock"
                                              user-emacs-directory))
    (keyfreq-mode 1)
    (keyfreq-autosave-mode 1))
  (use-package command-log-mode
    :pin melpa
    :init
    ;; workaround for global-command-log-mode
    (command-log-mode -1)
    ;; Log all keystroke except self-insert-command
    (setq clm/log-command-exceptions* '(nil self-insert-command)))

  (defun y/toggle-view-lossage()
    "Toggle auto update view-lossage."
    (interactive)
    (if (member 'view-lossage pre-command-hook)
        (remove-hook 'pre-command-hook 'view-lossage)
      (add-hook 'pre-command-hook 'view-lossage)))
#+END_SRC

** keybind help
=which-key= is a minor mode for Emacs that displays the key bindings following
your currently entered incomplete command (a prefix) in a popup. For example,
after enabling the minor mode if you enter C-x and wait for the default of 1
second the minibuffer will expand with all of the available key bindings that
follow C-x (or as many as space allows given your settings). Github url is:
https://github.com/justbur/emacs-which-key

=describe-bindings= are used to list all defined keys.
=describe-prefix-bindings= Describe the bindings of the prefix used to reach
this command.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :init
    ;; Do not auto start, I almost don't need it
    ;; (which-key-mode 1)
    (which-key-setup-side-window-right)
    (setq which-key-use-C-h-commands nil
          which-key-idle-delay 2.0
          which-key-popup-type 'minibuffer)
    :bind
    (:map which-key-mode-map
          ("C-x h" . which-key-C-h-dispatch)
          ("C-c M-h" . which-key-C-h-dispatch)))
#+END_SRC

** basic keybind
See =C-h i (elisp) Defining Minor Modes= for details.
#+BEGIN_SRC emacs-lisp
  (defun y/switch-buffer-scratch()
    "Switch buffer to *scartch*."
    (interactive)
    (let ((newcreate (not (get-buffer "*scratch*"))))
      (when (and (switch-to-buffer "*scratch*") newcreate)
        (insert initial-scratch-message))))
  (defun y/switch-buffer-init()
    "Switch buffer to user-init-file(default init.el)."
    (interactive)
    (find-file user-init-file))
  (defun y/switch-buffer-config()
    "Switch buffer to user-init-config(default config.org)."
    (interactive)
    (find-file user-init-config))
  (defun y/kill-help()
    "Change to other window then quit-window."
    (interactive)
    (save-excursion
      (and (switch-to-buffer "*Help*")
           (kill-buffer))))
  (defun y/display-startup-screen()
    "Interactive for display-startup-screen"
    (interactive)
    (display-startup-screen))

  (defalias 'y/display-about-screen 'display-about-screen)
  (defalias 'y/display-copying 'describe-copying)

  (defun y/delete-word (arg)
    "Delete characters forward until encountering the end of a word.
  With argument ARG, do this that many times."
    (interactive "p")
    (delete-region (point) (progn (forward-word arg) (point))))

  (defun y/backward-delete-word (arg)
    "Delete characters backward until encountering the beginning of a word.
  With argument ARG, do this that many times."
    (interactive "p")
    (y/delete-word (- arg)))

  (defun y/open-file-english-words()
    (interactive)
    (find-file "~/org/h/english-words.org")
    (goto-char (point-max)))

  (defun y/kill-help()
    "Change to other window then quit-window."
    (interactive)
    (save-excursion
      (and (switch-to-buffer "*Help*")
           (kill-buffer))))

  ;; remove arrow key. comment follow three lines if you need arrow key
  ;; e.g.: <up>, <down>, <left>, <right>
  (mapc 'global-unset-key '([left] [right] [up] [down]))
  (global-unset-key (kbd "C-x <left>"))
  (global-unset-key (kbd "C-x <right>"))

  (global-set-key (kbd "RET") #'newline-and-indent)
  (global-set-key (kbd "M-d") #'y/delete-word)
  (global-set-key (kbd "M-<backspace>") #'y/backward-delete-word)
  (global-set-key (kbd "M-<DEL>") #'y/backward-delete-word)
  (define-key global-map (kbd "M-p") #'backward-sentence)
  (define-key global-map (kbd "M-n") #'forward-sentence)

  (define-key minibuffer-local-map (kbd "C-p") #'previous-line-or-history-element)
  (define-key minibuffer-local-map (kbd "C-n") #'next-line-or-history-element)

  (define-minor-mode y/basic-keybind-mode "Basic minor keybind"
    :lighter " y-basic-keybind"
    :init-value t
    :keymap
    (let ((map (make-sparse-keymap)))
      (define-key map (kbd "C-c C-c") #'y/comment-or-uncomment-region-or-line)
      (define-key map (kbd "C-c q s") #'y/switch-buffer-scratch)
      (define-key map (kbd "C-c q i") #'y/switch-buffer-init)
      (define-key map (kbd "C-c q c") #'y/switch-buffer-config)
      (define-key map (kbd "C-c q e") #'y/open-file-english-words)
      (define-key map (kbd "C-h q") #'y/kill-help)
      (define-key map (kbd "C-o") #'other-window)
      (define-key map (kbd "C-x C-p") #'previous-buffer)
      (define-key map (kbd "C-x C-n") #'next-buffer)
      map))

  (defun y/basic-keybind-mode-on()
    "Active y/basic-keybind-mode"
    (interactive)
    (y/basic-keybind-mode 1))

  (define-globalized-minor-mode y/basic-keybind-global-mode
    y/basic-keybind-mode y/basic-keybind-mode-on)

  (y/basic-keybind-global-mode 1)

  (define-minor-mode y/read-only-keybind-mode "Read-only minor keybind"
    :lighter " y-read-only-keybind"
    :init-value nil
    :global nil
    :keymap
    (let ((map (make-sparse-keymap)))
      (define-key map (kbd "n") #'next-line)
      (define-key map (kbd "p") #'previous-line)
      (define-key map (kbd "a") #'move-beginning-of-line)
      (define-key map (kbd "e") #'move-end-of-line)
      (define-key map (kbd "f") #'forward-char)
      (define-key map (kbd "b") #'backward-char)
      map))

  (add-hook 'read-only-mode-hook #'y/read-only-keybind-mode)
#+END_SRC
* Basic Config
** behavior
#+BEGIN_SRC emacs-lisp
  ;; command history.
  (savehist-mode 1)
  ;; auto revert if buffer not modified. In git repo we always need it.
  (setq global-auto-revert-non-file-buffers t)
  (global-auto-revert-mode t)

  ;; simplify prompt
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; No backup, use git maintain file version
  (setq-default make-backup-files nil)
  (setq-default indent-tabs-mode nil)

  (setq byte-compile-warnings '(not free-vars))

  (setq kill-ring-max 500
        kill-whole-line t)
  (setq confirm-kill-processes nil)

  (delete-selection-mode t)
  (setq large-file-warning-threshold (* 256 1024 1024)) ;; 256MB
  (setq default-directory "~/")

  ;; Restore very slow in Windows, disable it
  (unless (or (string= system-type "winows-nt")
              (getenv "EMACS_Y_INTERNAL_ESUP_PROFILER"))
    (setq desktop-path `(,user-emacs-directory)
          desktop-dirname user-emacs-directory
          desktop-load-locked-desktop nil ;; Do not load if locked
          desktop-save t ;; no ask
          ;; restoring frame is generally unexpected
          desktop-restore-frames nil)
    (desktop-save-mode 1))

  (setq-default
   inhibit-splash-screen t
   initial-scratch-message
   (concat
    ";; This buffer is for text that is not saved, and for Lisp evaluation.\n"
    ";; To create a file, visit it with C-x C-f and enter text in its buffer.\n\n"
    ";; Happy hacking " (or user-login-name "<yanyg>") " - Emacs loves you!\n\n"))

  (defun y/line-numbers-mode(&optional arg)
    "Line numbers config."
    (interactive)
    (require 'display-line-numbers)
    (setq display-line-numbers-grow-only t)
    (set-face-attribute 'line-number nil
                        :inherit 'linum
                        :height 110
                        :weight 'normal
                        :slant 'italic)
    (set-face-attribute 'line-number-current-line nil
                        :inherit 'line-number
                        :foreground "#FF7F00"
                        :background "#1A1A1A")
    (global-display-line-numbers-mode arg))
  (y/line-numbers-mode) ;; support dynamically reload init file
  (y/add-after-init-hook #'y/line-numbers-mode)
#+END_SRC

** coding system
#+BEGIN_SRC emacs-lisp
  (prefer-coding-system 'utf-8-unix)
  (when (string-equal current-language-environment "Chinese-GBK")
    ;; Do not use utf-8-unix . chinese-gbk-dos for
    ;; the set will cause ggtags failure
    (setq default-process-coding-system '(utf-8 . chinese-gbk)))
#+END_SRC

** ui
Config for emacs daemon and non-daemon.
#+BEGIN_SRC emacs-lisp
  (defun y/frame-init-ui-basic(&optional frame)
    "Init FRAME user-interface after created."
    (interactive)
    (or frame
        (setq frame (selected-frame)))
    (with-selected-frame frame
      ;; Hide menu, tool, scroll bar, auto fullscreen for X
      (menu-bar-mode -1)
      (when (display-graphic-p)
        (set-frame-parameter nil 'fullscreen 'fullboth)
        (scroll-bar-mode -1))
      (when (fboundp 'tool-bar-mode)
        (tool-bar-mode -1))
      ;; cursor: bar with width 3, OrangeRed color, Steady mode
      (if (display-graphic-p)
          (progn
            (setq-default cursor-type 'box)
            (setq-default cursor-in-non-selected-windows nil)
            (blink-cursor-mode -1)
            (set-cursor-color "DarkOrange1"))
        (progn
          ;; Only support xterm.
          ;; FIXME: restore after exit.
          ;; need terminal support. 6 for steady bar, 2 for box
          ;; \e: ESC; \a: BELL; man ascii for more details.
          (send-string-to-terminal "\e[2 q\e]12;DarkOrange1\a")))

      ;; disable bell
      (setq visible-bell nil)
      (setq ring-bell-function 'ignore)

      ;; show column and size in the mode line
      (column-number-mode)
      (size-indication-mode t)))

  (y/add-after-init-hook #'y/frame-init-ui-basic)
#+END_SRC

** modeline
- Smart mode line. Try sml/apply-theme if want more.
- Diminish used to hide minor info

#+BEGIN_SRC emacs-lisp
  (setq display-time-default-load-average nil
        display-time-format "%k:%M %a" ;; remove %b %d
        display-time-mode t)
  (setq system-time-locale "C") ;; show english even LANG to zh_CN.UTF-8
  (display-time)

  (setq battery-mode-line-format " [%L %b%p%% %t]" ;; sml will override it
        battery-update-interval 5)
  (display-battery-mode)

  (use-package smart-mode-line
    :init
    (setq sml/col-number-format "%02c"
          sml/battery-format " [%L %b%p%% %t]"
          sml/name-width 15
          sml/no-confirm-load-theme t
          ;; sml/theme 'dark ;; others: light, respectful
          sml/theme 'respectful)
    (sml/setup)
    (add-to-list 'sml/replacer-regexp-list '(".*/linux" ":LK:")))

  (use-package diminish
    :init
    (diminish 'y/basic-keybind-mode)
    (diminish 'y/read-only-keybind-mode))
#+END_SRC

** mouse
Disable mouse globally.
#+BEGIN_SRC emacs-lisp
  ;; disable mouse at all
  (use-package disable-mouse
    :diminish global-disable-mouse-mode
    :init
    (global-disable-mouse-mode))
#+END_SRC

* Theme
Theme is another important ui aspect. Manual
https://www.gnu.org/software/emacs/manual/html_node/emacs/Custom-Themes.html,
https://www.gnu.org/software/emacs/manual/html_node/emacs/Creating-Custom-Themes.html
and wiki https://www.emacswiki.org/emacs/CustomThemes introduce some theme
knowledge.

Emacsthemes(https://emacsthemes.com/) and
Emacs Theme Gallary(https://pawelbx.github.io/emacs-theme-gallery/) lists
typical emacs theme.

Theme will gradually increase as time goes, put all liked theme package here
and select zenburn as default.

#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme)
  (use-package monokai-theme)
  (use-package solarized-theme)

  ;; my favorite theme
  (load-theme 'zenburn t)
#+END_SRC

* Platform Specific
** Windows
#+BEGIN_SRC emacs-lisp
  (when (string-equal system-type "windows-nt")
    (unless (getenv "HOME")
      (warn "Maybe you forgot to set environment variable HOME."))

    ;; M-w: paste, bind to kill-ring-save
    (w32-register-hot-key [M-w])
    ;; C-M-n: sp-up-sexp
    (w32-register-hot-key [C-M-n]))
#+END_SRC

** Mac
#+BEGIN_SRC emacs-lispp
  (when (memq window-system '(mac ns x))
    (use-package exec-path-from-shell
      :quelpa (exec-path-from-shell :fetcher github
                                    :repo "purcell/exec-path-from-shell"
                                    :stable t)
      :demand t
      :init
      (exec-path-from-shell-initialize)))

  ;; Copy from https://github.com/bbatsov/prelude/blob/master/core/prelude-macos.el
  (defun y/swap-meta-and-super()
    "Swap the mapping of Meta and Super.
  Very useful for people using their Mac with a
  Windows external keyboard from time to time."
    (interactive)
    (if (eq mac-command-modifier 'super)
        (progn
          (setq mac-command-modifier 'meta)
          (setq mac-option-modifier 'super)
          (message "Command is now bound to META and Option is bound to SUPER."))
      (setq mac-command-modifier 'super)
      (setq mac-option-modifier 'meta)
      (message "Command is now bound to SUPER and Option is bound to META.")))

  ;; m for mac, s for swap
  ;; (define-key global-map (kbd "C-c m s") 'y/swap-meta-and-super)

  ;; map super to meta
  (setq mac-command-modifier 'meta)
#+END_SRC

** Linux
Optimize fcitx behavior.
#+BEGIN_SRC emacs-lisp
  (use-package fcitx
    :init
    (fcitx-aggressive-setup)
    (fcitx-prefix-keys-turn-on)
    (fcitx-prefix-keys-add "C-x" "C-c" "C-h" "M-s" "M-o")
    (setq fcitx-use-dbus t))
#+END_SRC

* Efficiency
** abbrev
Abbreviations expands package. Builtin.

- Manual: https://www.gnu.org/software/emacs/manual/html_node/emacs/Abbrevs.html#Abbrevs
- Wiki: https://www.emacswiki.org/emacs/AbbrevMode
- Ergo: http://ergoemacs.org/emacs/emacs_abbrev_mode_tutorial.html

#+BEGIN_SRC emacs-lisp
  (require 'abbrev)
  (setq abbrev-file-name (locate-user-emacs-file ".abbrev.data"))
  (setq-default abbrev-mode t)
  (setq save-abbrevs 'silently)
  (diminish 'abbrev-mode)
#+END_SRC

** company
*company* is a text completion framework. It means COMplete ANYthing.
Gitub https://github.com/company-mode/company-mode.

The company configuration varies greatly for different major modes, and when
use emacs, company config will always be adjusted or optimized. So the total
configurations are complex and huge. If still use orgmode babel to maintain
company config, the config will be scattered everywhere. Therefore, I put all
company config in a special file y-company.el to enhance maintenance.

Material:
- Manual: https://company-mode.github.io/

#+BEGIN_SRC emacs-lisp
  (require 'y-company)
#+END_SRC

** eldoc - minor mode for lisp
#+BEGIN_SRC emacs-lisp
  ;; builtin
  (require 'eldoc)
  (setq eldoc-idle-delay 0)
  (add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
  (add-hook 'lisp-mode-hook 'eldoc-mode)
  (add-hook 'lisp-interaction-mode-hook 'eldoc-mode)
  (diminish 'eldoc-mode)
#+END_SRC

** expand-region
- melpa: https://melpa.org/#/expand-region
- github: https://github.com/magnars/expand-region.el
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :init
    (setq expand-region-smart-cursor t) ;; cursor put to region tail
    :bind
    ("<f7>"   . er/expand-region)
    ("C-c r +"   . er/expand-region)
    ("C-c r ="   . er/expand-region)
    ("C-c r w"   . er/mark-word)
    ("C-c r s"   . er/mark-symbol)
    ("C-c r f"   . er/mark-method-call)
    ("C-c r q i" . er/mark-inside-quotes)
    ("C-c r q o" . er/mark-outside-quotes)
    ("C-c r p i" . er/mark-inside-pairs)
    ("C-c r p o" . er/mark-outside-pairs)
    ("C-c r t i" . er/mark-inner-tag)
    ("C-c r t o" . er/mark-outer-tag))
#+END_SRC

** flycheck
Flycheck is a modern on-the-fly syntax checking package. Homepage is
https://www.flycheck.org/en/latest/.

Flycheck use external specific system tool to check syntax. See
https://www.flycheck.org/en/latest/languages.html#flycheck-languages,
so need properly exec-path to search it. Install package exec-path-from-shell
for mac compatiblity: https://github.com/purcell/exec-path-from-shell.

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :diminish
    :init
    (setq flycheck-emacs-lisp-load-path 'inherit)
    :config
    (add-to-list 'flycheck-clang-warnings "no-pragma-once-outside-header")
    :hook
    (after-init    . global-flycheck-mode)
    (flycheck-mode . (lambda()
                       "flycheck disable clang then use gcc."
                       (add-to-list 'flycheck-disabled-checkers
                                    'c/c++-clang))))
#+END_SRC

Read https://www.flycheck.org/en/latest/languages.html#emacs-lisp to get more
details.

Install flycheck-color-mode to enhance display.
Github https://github.com/flycheck/flycheck-color-mode-line.

#+BEGIN_SRC emacs-lisp
  (use-package flycheck-color-mode-line
    :hook
    (flycheck-mode . flycheck-color-mode-line-mode))
#+END_SRC

** helm
*Helm* is an Emacs framework for incremental completions and narrowing
selections.

- Github: https://github.com/emacs-helm/helm
- WIKI: https://github.com/emacs-helm/helm/wiki

#+BEGIN_SRC emacs-lisp
  (use-package helm
    :diminish
    :config
    ;; always use english input in helm minibuffer
    ;; use C-\ (toggle-input-method) to toggle to other(e.g. pyim)
    (helm-set-local-variable 'current-input-method nil)
    :bind
    ;; ("C-x C-f" . helm-find-files)
    ("M-x" . helm-M-x)
    ("C-x b" . helm-mini))
#+END_SRC

** helpful
*Helpful* is an alternative to the built-in Emacs help that provides much more
contextual information.

#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :pin melpa
    :bind
    ("C-h f" . helpful-callable)
    ("C-h k" . helpful-key)
    ("C-h v" . helpful-variable)
    ("C-h C" . helpful-command)
    ("C-c C-d" . helpful-at-point))
#+END_SRC

** highlight parenthesis
- Github: https://github.com/tsdh/highlight-parentheses.el
#+BEGIN_SRC emacs-lisp
  (use-package highlight-parentheses
    :diminish highlight-parentheses-mode
    :hook
    (prog-mode . highlight-parentheses-mode))
#+END_SRC

** highlight-symbol
- Github: https://github.com/nschum/highlight-symbol.el

#+BEGIN_SRC emacs-lisp
  ;; Close highlight-symbol-mode, do it manually
  (use-package highlight-symbol
    :diminish highlight-symbol-mode
    :init
    :config
    ;; (setq highlight-symbol-idle-delay .1)
    ;; The original func always print ugly string '<N> occurrences in buffer'
    ;; Replace with dummy empty function
    ;; (setq highlight-symbol-occurrence-message nil)
    ;; (advice-add 'highlight-symbol-count :override #'(lambda() nil))
    :bind
    (([f8] . highlight-symbol-at-point)
     ([S-f8] . highlight-regexp)
     ([f9] . highlight-symbol-query-replace)
     ("C-c s h" . highlight-symbol-at-point)
     ("C-c s r" . highlight-regexp)
     ("C-c s R" . highlight-symbol-query-replace))
    ;; :hook
    ;; disable auto high-light
    ;; (prog-mode . highlight-symbol-mode)
    )
#+END_SRC

** hungry delete
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :diminish
    :hook
    (after-init . global-hungry-delete-mode))
#+END_SRC

** iedit
- Github: https://github.com/victorhge/iedit

#+BEGIN_SRC emacs-lisp
  (use-package iedit
    :bind
    (("C-c ;" . iedit-mode)))
#+END_SRC

** info
- Info colors: https://github.com/ubolonton/info-colors
#+BEGIN_SRC emacs-lisp
  (use-package info
    :bind
    ("C-h C-a" . info-apropos))

  (use-package info-colors
    :after info
    :hook
    (Info-selection . info-colors-fontify-node))
#+END_SRC

** smartparens
Smartparens is a minor mode for dealing with pairs in Emacs.
- Github: https://github.com/Fuco1/smartparens
- Blog: https://ebzzry.io/en/emacs-pairs/
- Wiki: https://github.com/Fuco1/smartparens/wiki
- ref [[https://ebzzry.io/en/emacs-pairs/][emacs-pairs]], [[https://github.com/Fuco1/smartparens][smartparens github]], and [[https://github.com/Fuco1/smartparens/wiki][wiki]]

#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :diminish
    :config
    (require 'smartparens-config)
    (setq sp-base-key-bindings 'paredit)
    (setq sp-autoskip-closing-pair 'always)
    (setq sp-hybrid-kill-entire-symbol nil)
    (sp-use-paredit-bindings)
    (show-smartparens-global-mode t)
    ;; use eval-when-compile or with-eval-after-load can eliminate warning:
    ;; ‘sp-local-pair’ might not be defined at runtime
    ;; But when start daemon cause a new error:
    ;;  Eager macro-expansion failure: (void-function sp-local-pair)
    (sp-local-pair 'lisp-mode "'" nil :actions nil)
    (sp-local-pair 'emacs-lisp-mode "'" nil :actions nil)
    (sp-local-pair 'lisp-interaction-mode "'" nil :actions nil)
    (sp-local-pair 'lisp-mode "`" nil :actions nil)
    (sp-local-pair 'emacs-lisp-mode "`" nil :actions nil)
    (sp-local-pair 'lisp-interaction-mode "`" nil :actions nil)
    :hook
    (after-init     . smartparens-global-mode)
    (after-init     . show-smartparens-global-mode)
    (c-mode-common  . turn-on-smartparens-strict-mode))
#+END_SRC

** stickfunc
- Github: https://github.com/tuhdo/semantic-stickyfunc-enhance#features

#+BEGIN_SRC emacs-lisp
  (use-package stickyfunc-enhance
    :pin melpa
    :diminish)
#+END_SRC

** swiper
*Swiper* is a flexible, simple tools for minibuffer completion in Emacs.
- Github: https://github.com/abo-abo/swiper
- Manual: http://oremacs.com/swiper/
- WIKI: https://github.com/abo-abo/swiper/wiki

#+BEGIN_SRC emacs-lisp
  ;; short bindings with a common prefix
  ;; https://github.com/abo-abo/hydra
  (use-package hydra
    :demand t) ;; used by ivy
  (use-package ivy
    ;; archive version ivy-0.10 lost counsel.el, use github replaced
    :quelpa (ivy :fetcher github
                 :repo "abo-abo/swiper"
                 :stable nil)
    :diminish
    :after hydra ;; swiper internal use, compile error if absent
    :init
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "%d/%d > "
          counsel-describe-function-function #'helpful-function
          counsel-describe-variable #'helpful-variable)
    (setq counsel-find-file-ignore-regexp
          (concat
           ;; filename begins with #
           "\\(?:\\`[#.]\\)"
           ;; filename ends with # or ~
           "\\|\\(?:\\`.+?[#~]\\'\\)"
           ))
    :bind
    ("C-s"     . swiper)
    ("C-x C-f" . counsel-find-file)
    ("C-h f"   . counsel-describe-function)
    ("C-h v"   . counsel-describe-variable)
    ("C-c g f" . counsel-git)
    ("C-c g g" . counsel-git-grep)
    ("C-c g l" . counsel-git-log)
    ("C-c g a" . counsel-ag)
    ("C-c g g" . counsel-grep)
    :hook
    (after-init . ivy-mode))
#+END_SRC

** undo tree
- Github: https://github.com/apchamberlain/undo-tree.el

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :pin gnu
    :diminish
    :hook
    (after-init . global-undo-tree-mode))
#+END_SRC

* Font
** default config
elisp Chapter 39 section 39.12 describes more technology about faces. Read it
for more details:
- 39.12.9 Font Selection ::
  https://www.gnu.org/software/emacs/manual/html_node/elisp/Font-Selection.html#Font-Selection
- 39.12.11 Fontsets ::
  https://www.gnu.org/software/emacs/manual/html_node/elisp/Fontsets.html#Fontsets
- 39.12.12 Low-Level Font Representation ::
  https://www.gnu.org/software/emacs/manual/html_node/elisp/Low_002dLevel-Font.html#Low_002dLevel-Font

Font depends on specific platform (Linux/Mac/Windows). Here according to
different platform to set beautiful/properly font as much as possible.

- Monospace: Code always use monospace font. See wiki ::
  https://en.wikipedia.org/wiki/List_of_monospaced_typefaces

Set different font for different major mode. See
https://emacs.stackexchange.com/a/3044.

#+BEGIN_SRC emacs-lisp
  (defconst y/font-mono-size-x 15
    "Monospace font size under graphic.")

  (defconst y/font-mono-size-c 15
    "Monospace font size under console.")

  ;; FIXME: support for different frame by make-variable-frame-local
  (defvar y/font-cjk-name nil "Fill when set for CJK fonts.")
  ;; (make-variable-frame-local 'y/font-cjk-name)
  (defvar cjk-charsets '(kana han symbol cjk-misc bopomofo))

  (defconst y/font-mono-name-list-default
    `(("Source Code Variable" . ,y/font-mono-size-x)
      ("Source Code Pro" . ,y/font-mono-size-x)
      ("PragmataPro" . ,y/font-mono-size-x)
      ("ProFont" . ,y/font-mono-size-x)
      ("Lucida Sans" . ,y/font-mono-size-x)
      ("Courier New" . ,y/font-mono-size-x)
      ("Consolas" . ,y/font-mono-size-x)
      ("DejaVu Sans Mono" . ,y/font-mono-size-x)
      ("FreeMono" . ,y/font-mono-size-x)
      ("Liberation Mono" . ,y/font-mono-size-x))
    "Monospace font name assoc default value.")

  (defconst y/font-monocjk-size-x 15
    "MonospaceCJK font size under graphic.")

  (defconst y/font-monocjk-size-c 15
    "MonospaceCJK font size under console.")

  (defconst y/font-monocjk-name-list-default
    `(("YouYuan"             . ,y/font-monocjk-size-x)
      ("Microsoft YaHei UI"  . ,y/font-monocjk-size-x)
      ("Microsoft YaHei"     . ,y/font-monocjk-size-x)
      ("FangSong"            . ,y/font-monocjk-size-x)
      ("SimSun"              . ,y/font-monocjk-size-x)
      ("AR PL SungtiL GB"    . ,y/font-monocjk-size-x)
      ("AR PL Mingti2L Big5" . ,y/font-monocjk-size-x))
    "MonospaceCJK font name assoc default value.")

  (defvar y/font-mono-name-list-x nil
    "Monospace font candidates under graphic. Format is ((name . size) ...).")
  (defvar y/font-mono-name-list-c nil
    "Monospace font candidates under console. Format is ((name . size) ...).")

  (defvar y/font-monocjk-name-list-x nil
    "MonospaceCJK font candidates under graphic. Format is ((name . size) ...).")
  (defvar y/font-monocjk-name-list-c nil
    "MonospaceCJK font candidates under console. Format is ((name . size) ...).")

  ;; Customize the name list to satisfy your taste.
  (cond ((string= system-type "gnu/linux")  ;; Linux
         (setq y/font-mono-name-list-x y/font-mono-name-list-default
               y/font-mono-name-list-c y/font-mono-name-list-default)
         (setq y/font-monocjk-name-list-x y/font-monocjk-name-list-default
               y/font-monocjk-name-list-c y/font-monocjk-name-list-default))
        ((string= system-type "darwin")     ;; Mac prepend ?
         (setq y/font-mono-name-list-x
               (cons `("Apple Color Emoji" . ,y/font-mono-size-x)
                     y/font-mono-name-list-default))
         (setq y/font-mono-name-list-c y/font-mono-name-list-x)
         (setq y/font-monocjk-name-list-x y/font-monocjk-name-list-default
               y/font-monocjk-name-list-c y/font-monocjk-name-list-default))
        ((string= system-type "windows-nt") ;; Windows
         (setq y/font-mono-name-list-x y/font-mono-name-list-default
               y/font-mono-name-list-c y/font-mono-name-list-default)
         (setq y/font-monocjk-name-list-x y/font-monocjk-name-list-default
               y/font-monocjk-name-list-c y/font-monocjk-name-list-default))
        (t
         (setq y/font-mono-name-list-x y/font-mono-name-list-default
               y/font-mono-name-list-c y/font-mono-name-list-default)
         (setq y/font-monocjk-name-list-x y/font-monocjk-name-list-default
               y/font-monocjk-name-list-c y/font-monocjk-name-list-default)))

  (defun y/font-is-exist(namesize)
    "Check font exist or not. The font property :name is NAME."
    (if (and (stringp (car namesize))
             (integerp (cdr namesize))
             (find-font (font-spec :name (car namesize)
                                   :size (cdr namesize))))
        t
      nil))

  (defun y/font-set-frame-font-if-exist(frame charset namesize &optional fontset)
    "For FRAME, Set CHARSET's font to NAMESIZE if that font exists. If FONTSET
  is non-nil, then call set-fontset-font set default font."
    (if (y/font-is-exist namesize)
        (progn
          ;; (message "Set Font Frame(%s) Charset(%s) to %s" frame charset namesize)
          (if fontset
              (set-frame-font (font-spec :name (car namesize)
                                         :size (cdr namesize)) nil nil)
            (set-fontset-font nil charset (font-spec :name (car namesize)
                                                     :size (cdr namesize))
                              frame))
          (and (memq charset cjk-charsets)
               (setq y/font-cjk-name (car namesize)))
          t)
      nil))

  (defun y/font-set-frame-try-list(frame charset namesizeassoc &optional fontset)
    "For FRAME, from front to back in NAMESIZEASSOC, try to set CHARSET's font."
    (let ((r nil))
      (dolist (namesize namesizeassoc)
        (unless r
          (and (y/font-set-frame-font-if-exist
                frame charset namesize fontset)
               (setq r t))))))

  (defun y/font-set-frame-font-by-display
      (frame charset namesizeassocx namesizeassocc &optional fontset)
    "For FRAME, from front to back in namesizeassoc, try to set CHARSET's font.
  If frame run in graphic, use NAMESIZEASSOCX, otherwise use NAMESIZEASSOCC"
    (if (display-graphic-p)
        (y/font-set-frame-try-list frame charset namesizeassocx fontset)
      (y/font-set-frame-try-list frame charset namesizeassocc fontset)))

  (defun y/font-set(&optional frame)
    "For FRAME set properly font."
    (or frame (setq frame (selected-frame)))
    (with-selected-frame frame
        (y/font-set-frame-font-by-display
         frame nil y/font-mono-name-list-x y/font-mono-name-list-c t)
        (dolist (charset cjk-charsets)
          (y/font-set-frame-font-by-display
           frame charset y/font-monocjk-name-list-x y/font-monocjk-name-list-c))))

  (y/add-after-init-hook #'y/font-set)
#+END_SRC

** cnfonts
#+BEGIN_SRC emacs-lisp
  (use-package cnfonts
    :init
    ;; (cnfonts-enable)
    ;; (cnfonts-set-spacemacs-fallback-fonts)
    )
#+END_SRC

* Dictionary
** youdao
- Homepage: [[https://github.com/xuchunyang/youdao-dictionary.el][GitHub Youdao]]
#+BEGIN_SRC emacs-lisp
  (use-package youdao-dictionary
    :init
    (setq url-automatic-caching t)
    :bind
    (("C-c y t" . youdao-dictionary-search-at-point)
     ("C-c y s" . youdao-dictionary-play-voice-at-point)))
#+END_SRC

* Orgmode
** directory layout
- Homepage: [[http://orgmode.org/]]
- My org layout:
#+BEGIN_SRC text
  org             <-- The root of org
  ├── notes.org   <-- captures
  ├── h           <-- Homepage
  ├── a           <-- work(alibaba)
  ├── p           <-- personal/private data
  └── misc        <-- All others
#+END_SRC

** org
#+BEGIN_SRC emacs-lisp
  (use-package org
    :diminish org
    :init
    (progn
      (setq org-support-shift-select t)
      (setq org-src-fontify-natively t))
    :config
    (progn
      (setq org-directory "~/org")
      (setq org-agenda-files (list org-directory
                                   (concat org-directory "/a")
                                   (concat org-directory "/p")))
      (setq org-default-notes-file (concat org-directory "/notes.org"))
      (setq org-display-custom-times t)
      (setq org-time-stamp-custom-formats
            '("<%Y-%m-%d %a>" . "<%Y-%m-%d %a %H:%M>")))
    :bind
    ;; global
    (("C-c c" . org-capture)
     ("C-c a" . org-agenda))
    (:map org-mode-map
          ("C-o" . other-window)
          ("C-c t" . org-insert-structure-template))
    :mode
    ("\\.org\\'" . org-mode))

  ;; disable org-src flycheck
  (use-package org-src
    :ensure org-plus-contrib
    :diminish
    :hook
    (org-src-mode . (lambda() (flycheck-mode -1))))
#+END_SRC

** bullets
- Homepage: [[https://github.com/sabof/org-bullets][GitHub Org Bullets]]
- FIXME: Win7 Ultimate CN version can not show heading bullets low than level 3
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :hook
    (org-mode . org-bullets-mode))
#+END_SRC

** pomodoro
- https://github.com/lolownia/org-pomodoro
#+BEGIN_SRC emacs-lisp
  (use-package org-pomodoro
    :pin melpa
    :init
    (setq org-pomodoro-length 30
          org-pomodoro-format "%s"))
#+END_SRC

** publish
A big topic, finish later.

* Development
** c/c++ style
Use c-guess-no-install and c-guess-view to generate style template.
Read variable c-offsets-alist for more details.

#+BEGIN_SRC emacs-lisp
  (defconst y/c-style-basic
    '((c-tab-always-indent . nil)
      (c-basic-offset . 4)
      (c-offsets-alist
       (block-close . 0)       ; Guessed value
       (brace-list-close . 0)  ; Guessed value
       (brace-list-entry . 0)  ; Guessed value
       (brace-list-intro . +)  ; Guessed value
       (class-close . 0)       ; Guessed value
       (defun-block-intro . +) ; Guessed value
       (defun-close . -)       ; Guessed value
       (defun-open . -)        ; Guessed value
       (else-clause . 0)       ; Guessed value
       (inclass . +)           ; Guessed value
       (statement . 0)         ; Guessed value
       (statement-block-intro . +) ; Guessed value
       (statement-cont . +)    ; Guessed value
       (substatement . +)      ; Guessed value
       (topmost-intro . 0)     ; Guessed value
       (access-label . -)
       (annotation-top-cont . 0)
       (annotation-var-cont . +)
       (arglist-close . c-lineup-close-paren)
       (arglist-cont c-lineup-gcc-asm-reg 0)
       (arglist-cont-nonempty . c-lineup-arglist)
       (arglist-intro . +)
       (block-open . 0)
       (brace-entry-open . 0)
       (brace-list-open . 0)
       (c . c-lineup-C-comments)
       (case-label . 0)
       (catch-clause . 0)
       (class-open . 0)
       (comment-intro . c-lineup-comment)
       (composition-close . 0)
       (composition-open . 0)
       (cpp-define-intro c-lineup-cpp-define +)
       (cpp-macro . -1000)
       (cpp-macro-cont . +)
       (do-while-closure . 0)
       (extern-lang-close . 0)
       (extern-lang-open . 0)
       (friend . 0)
       (func-decl-cont . +)
       (incomposition . +)
       (inexpr-class . +)
       (inexpr-statement . +)
       (inextern-lang . +)
       (inher-cont . c-lineup-multi-inher)
       (inher-intro . +)
       (inlambda . c-lineup-inexpr-block)
       (inline-close . 0)
       (inline-open . 0)
       (inmodule . +)
       (innamespace . 0)
       (knr-argdecl . 0)
       (knr-argdecl-intro . 0)
       (label . 0)
       (lambda-intro-cont . +)
       (member-init-cont . c-lineup-multi-inher)
       (member-init-intro . +)
       (module-close . 0)
       (module-open . 0)
       (namespace-close . 0)
       (namespace-open . 0)
       (objc-method-args-cont . c-lineup-ObjC-method-args)
       (objc-method-call-cont c-lineup-ObjC-method-call-colons c-lineup-ObjC-method-call +)
       (objc-method-intro .
                          [0])
       (statement-case-intro . +)
       (statement-case-open . 0)
       (stream-op . c-lineup-streamop)
       (string . -1000)
       (substatement-label . 0)
       (substatement-open . 0)
       (template-args-cont c-lineup-template-args +)
       (topmost-intro-cont . c-lineup-topmost-intro-cont)))
    "y/c-basic")
  (c-add-style "y/c-basic" y/c-style-basic)

  (defconst y/c-style-linux
    '((c-tab-always-indent . nil) ; manualy added
      (c-basic-offset . 8)     ; Guessed value
      (c-offsets-alist
       (block-close . 0)       ; Guessed value
       (brace-list-close . 0)  ; Guessed value
       (brace-list-entry . 0)  ; Guessed value
       (brace-list-intro . +)  ; Guessed value
       (class-close . 0)       ; Guessed value
       (defun-block-intro . +) ; Guessed value
       (defun-close . -)       ; Guessed value
       (defun-open . -)        ; Guessed value
       (else-clause . 0)       ; Guessed value
       (inclass . +)           ; Guessed value
       (statement . 0)         ; Guessed value
       (statement-block-intro . +) ; Guessed value
       (statement-cont . +)    ; Guessed value
       (substatement . +)      ; Guessed value
       (topmost-intro . 0)     ; Guessed value
       (access-label . -)
       (annotation-top-cont . 0)
       (annotation-var-cont . +)
       (arglist-close . c-lineup-close-paren)
       (arglist-cont c-lineup-gcc-asm-reg 0)
       (arglist-cont-nonempty . c-lineup-arglist)
       (arglist-intro . c-lineup-arglist-intro-after-paren)
       (block-open . 0)
       (brace-entry-open . 0)
       (brace-list-open . 0)
       (c . c-lineup-C-comments)
       (case-label . 0)
       (catch-clause . 0)
       (class-open . 0)
       (comment-intro . c-lineup-comment)
       (composition-close . 0)
       (composition-open . 0)
       (cpp-define-intro c-lineup-cpp-define +)
       (cpp-macro . -1000)
       (cpp-macro-cont . +)
       (do-while-closure . 0)
       (extern-lang-close . 0)
       (extern-lang-open . 0)
       (friend . 0)
       (func-decl-cont . +)
       (incomposition . +)
       (inexpr-class . +)
       (inexpr-statement . +)
       (inextern-lang . +)
       (inher-cont . c-lineup-multi-inher)
       (inher-intro . +)
       (inlambda . c-lineup-inexpr-block)
       (inline-close . 0)
       (inline-open . 0)
       (inmodule . +)
       (innamespace . +)
       (knr-argdecl . 0)
       (knr-argdecl-intro . 5)
       (label . 0)
       (lambda-intro-cont . +)
       (member-init-cont . c-lineup-multi-inher)
       (member-init-intro . +)
       (module-close . 0)
       (module-open . 0)
       (namespace-close . 0)
       (namespace-open . 0)
       (objc-method-args-cont . c-lineup-ObjC-method-args)
       (objc-method-call-cont c-lineup-ObjC-method-call-colons c-lineup-ObjC-method-call +)
       (objc-method-intro . [0])
       (statement-case-intro . +)
       (statement-case-open . +)
       (stream-op . c-lineup-streamop)
       (string . -1000)
       (substatement-label . 0)
       (substatement-open . 0)
       (template-args-cont c-lineup-template-args +)
       (topmost-intro-cont first c-lineup-topmost-intro-cont c-lineup-gnu-DEFUN-intro-cont)))
    "y/c-linux")
  (c-add-style "y/c-linux" y/c-style-linux)

  (defconst y/c-style-alibaba
    '((c-tab-always-indent . nil) ; manualy added
      (c-basic-offset . 4)     ; Guessed value
      (c-offsets-alist
       (block-close . 0)       ; Guessed value
       (brace-list-close . 0)  ; Guessed value
       (brace-list-entry . 0)  ; Guessed value
       (brace-list-intro . +)  ; Guessed value
       (class-close . 0)       ; Guessed value
       (defun-block-intro . +) ; Guessed value
       (defun-close . -)       ; Guessed value
       (defun-open . -)        ; Guessed value
       (else-clause . 0)       ; Guessed value
       (inclass . +)           ; Guessed value
       (statement . 0)         ; Guessed value
       (statement-block-intro . +) ; Guessed value
       (statement-cont . +)    ; Guessed value
       (substatement . +)      ; Guessed value
       (topmost-intro . 0)     ; Guessed value
       (access-label . -)
       (annotation-top-cont . 0)
       (annotation-var-cont . +)
       (arglist-close . c-lineup-close-paren)
       (arglist-cont c-lineup-gcc-asm-reg 0)
       (arglist-cont-nonempty . c-lineup-arglist)
       (arglist-intro . +)
       (block-open . 0)
       (brace-entry-open . 0)
       (brace-list-open . 0)
       (c . c-lineup-C-comments)
       (case-label . 0)
       (catch-clause . 0)
       (class-open . 0)
       (comment-intro . c-lineup-comment)
       (composition-close . 0)
       (composition-open . 0)
       (cpp-define-intro c-lineup-cpp-define +)
       (cpp-macro . -1000)
       (cpp-macro-cont . +)
       (do-while-closure . 0)
       (extern-lang-close . 0)
       (extern-lang-open . 0)
       (friend . 0)
       (func-decl-cont . +)
       (incomposition . +)
       (inexpr-class . +)
       (inexpr-statement . +)
       (inextern-lang . +)
       (inher-cont . c-lineup-multi-inher)
       (inher-intro . +)
       (inlambda . c-lineup-inexpr-block)
       (inline-close . 0)
       (inline-open . 0)
       (inmodule . +)
       (innamespace . 0)
       (knr-argdecl . 0)
       (knr-argdecl-intro . 0)
       (label . 0)
       (lambda-intro-cont . +)
       (member-init-cont . c-lineup-multi-inher)
       (member-init-intro . +)
       (module-close . 0)
       (module-open . 0)
       (namespace-close . 0)
       (namespace-open . 0)
       (objc-method-args-cont . c-lineup-ObjC-method-args)
       (objc-method-call-cont c-lineup-ObjC-method-call-colons c-lineup-ObjC-method-call +)
       (objc-method-intro .
                          [0])
       (statement-case-intro . +)
       (statement-case-open . 0)
       (stream-op . c-lineup-streamop)
       (string . -1000)
       (substatement-label . 0)
       (substatement-open . 0)
       (template-args-cont c-lineup-template-args +)
       (topmost-intro-cont . c-lineup-topmost-intro-cont)))
    "y/c-alibaba")
  (c-add-style "y/c-alibaba" y/c-style-alibaba)

  (defun y/c-style-hook()
    "Config c/c++ style depends on file pathname"
    (when (buffer-file-name)
      (cond ((or (string-match "/pangu/" (buffer-file-name))
                 (string-match "/apsara/" (buffer-file-name))
                 (string-match "/stone/" (buffer-file-name)))
             (c-set-style "y/c-alibaba"))
            ((or (string-match "/linux.*/" (buffer-file-name)))
             (c-set-style "y/c-linux")
             ;; Linux use real tab. Auto buffer-local.
             (setq indent-tabs-mode t))
            (t ;; all default to y/c-basic
             (c-set-style "y/c-basic")))))
  (add-hook 'c-mode-common-hook 'y/c-style-hook)
#+END_SRC

** cmake
#+BEGIN_SRC emacs-lisp
  (use-package cmake-mode)
  (use-package cmake-font-lock
    :pin melpa)
#+END_SRC

** company
   Enhance for c/c++. see =~/.emacs.d/lisp/y-company.el=.

** c++ modern font
*modern-cpp-font-lock* Syntax highlighting support for "Modern C++" - until
C++20 and Technical Specification.

- Github: https://github.com/ludwigpacifici/modern-cpp-font-lock
- Wiki: https://github.com/ludwigpacifici/modern-cpp-font-lock/wiki

#+BEGIN_SRC emacs-lisp
  (use-package modern-cpp-font-lock
    :diminish modern-c++-font-lock-mode
    :hook
    (c++-mode . modern-c++-font-lock-mode))

  (add-to-list 'auto-mode-alist '("\\.cpp\\'" . c++-mode))
  (add-to-list 'auto-mode-alist '("\\.hh\\'" . c++-mode))
  (add-to-list 'auto-mode-alist '("\\.hpp\\'" . c++-mode))
#+END_SRC

** gtags
*xref* used to find definitions and references of any function, method,
struct, macro,. Builtin.

*ggtags* and *counsel-gtags* are global wrapper.

Put all in y-init-tags.el

- Manual: https://www.gnu.org/software/emacs/manual/html_node/emacs/Xref.html#Xref
- ggtags github: https://github.com/leoliu/ggtags
- counsel-gtags github: https://github.com/syohex/emacs-counsel-gtags

#+begin_src emacs-lisp
  (require 'xref)
  (define-key emacs-lisp-mode-map (kbd "C-c x .") #'xref-find-definitions)
  (define-key emacs-lisp-mode-map (kbd "C-c x d") #'xref-find-definitions)
  (define-key emacs-lisp-mode-map (kbd "C-c x r") #'xref-find-references)
  (define-key lisp-interaction-mode-map (kbd "C-c x .") #'xref-find-definitions)
  (define-key lisp-interaction-mode-map (kbd "C-c x d") #'xref-find-definitions)
  (define-key lisp-interaction-mode-map (kbd "C-c x r") #'xref-find-references)

  (use-package ggtags
    :diminish
    :bind
    (:map ggtags-mode-map
          ("C-c g s" . ggtags-find-other-symbol)
          ("C-c g ." . ggtags-find-tag-dwim)
          ("C-c g h" . ggtags-view-tag-history)
          ("C-c g r" . ggtags-find-reference)
          ("C-c g f" . ggtags-find-file)
          ("C-c g C" . ggtags-create-tags)
          ("C-c g c" . ggtags-completion-at-point)
          ("C-c g u" . ggtags-update-tags)))

  (use-package counsel-gtags
    :diminish
    :bind
    (:map counsel-gtags-mode-map
          ("C-c g s" . counsel-gtags-find-symbol)
          ("C-c g ." . counsel-gtags-dwim)
          ("C-c g ," . counsel-gtags-pop)
          ("C-c g d" . counsel-gtags-find-definition)
          ("C-c g r" . counsel-gtags-find-reference)
          ("C-c g f" . counsel-gtags-find-file)
          ("C-c g C" . counsel-gtags-create-tags)
          ("C-c g u" . counsel-gtags-update-tags))
    :hook
    (c-mode-common . counsel-gtags-mode))

  ;; Join gtags-find-symbol and semantic-ia-fast-jump smoothly.
  (defun y/tags-jump-symbol(pos)
    "Find tag at current point POS, and use current point if POS nil."
    (interactive "d")
    (or pos (setq pos (point)))
    (or (and (semantic-active-p)
             (semantic-ia-fast-jump pos))
        (and (bound-and-true-p counsel-gtags-mode)
             (counsel-gtags-dwim))
        (xref-find-definitions (xref-backend-identifier-at-point
                                (xref-find-backend)))
        (error "Could not find symbol at current point")))

  (global-set-key (kbd "M-.") #'y/tags-jump-symbol)
  (define-key y/read-only-keybind-mode-map "." #'y/tags-jump-symbol)
  (define-key y/read-only-keybind-mode-map "," #'xref-pop-marker-stack)
#+end_src

** log view
Here is an extend template. Company Specialized config dispath to private
config.

- Github: https://github.com/doublep/logview
#+BEGIN_SRC emacs-lisp
  (use-package logview
    :init
    (setq logview-additional-submodes
          '(("ycode-log-submode"
             (format . "[TIMESTAMP] [LEVEL] [THREAD]")
             (levels . "ycode-log-level")
             ;; define timestamp if not one of standard
             ;; (timestamp . "yyyy-MM-dd HH:mm:ss.UUUUUU")
             (aliases "ycode-log"))))

    (setq logview-additional-level-mappings
          '(("ycode-log-level"
             (error "ERROR" "FATAL")
             (warning "WARNING")
             (information "INFO")
             (debug "DEBUG")
             (trace "TRACE")))))
#+END_SRC

** magit
#+BEGIN_SRC emacs-lisp
  (use-package magit)
#+END_SRC

** semantic
See =~/.emacs.d/lisp/y-company.el=

Semantic use mode-local include path variable. When we work on multiple
project with different system path, semantic can not work correctly. We
use =switch-buffer-hook= to change include path dynamically.
See [[#sec-dir-locals][Security dir-locals]] for detail.

** sr-speedbar
#+BEGIN_SRC emacs-lisp
  (use-package sr-speedbar
    :init
    (setq sr-speedbar-auto-refresh t
          speedbar-use-images nil
          sr-speedbar-width-x 10
          sr-speedbar-max-width 20
          sr-speedbar-skip-other-window-p t)
    :bind
    ("C-c w b" . sr-speedbar-toggle)
    ("C-c b" . sr-speedbar-select-window))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package function-args
    :config
    (fa-config-default))
#+END_SRC

** whitespace
*whitespace* render a space, tabs, newlines to a visible glyph.
- Github: https://github.com/emacs-mirror/emacs/blob/master/lisp/whitespace.el
- builtin lisp, see [[https://github.com/emacs-mirror/emacs/blob/master/lisp/whitespace.el][GitHub whitespace.el]]
- WIKI: https://www.emacswiki.org/emacs/WhiteSpace
- Ergoemacs: http://ergoemacs.org/emacs/whitespace-mode.html
#+BEGIN_SRC emacs-lisp
  (defun y/whitespace-color(&optional theme)
    "Set whitespace color depends on current theme THEME."
    (custom-set-faces
     '(whitespace-newline ((t (:foreground "#75715E" :background nil))))
     ;; '(whitespace-newline ((t (:foreground "#424242"))))
     '(whitespace-tab ((t (:foreground "#75715E" :background nil))))
     '(whitespace-space ((t (:foreground "#75715E" :background nil))))))

  (use-package whitespace
    :diminish
    :config
    (progn
      (setq whitespace-line-column 80) ;; limit line length
      (setq whitespace-style
            '(face trailing spaces tabs lines-tail newline
                   space-before-tab space-before-tab::tab
                   space-before-tab::space space-after-tab::tab
                   space-after-tab::space space-after-tab
                   newline-mark space-mark tab-mark))
      (setq whitespace-display-mappings
            '((space-mark 32 [183] [46])
              (newline-mark 10 [182 10])
              ;; (tab-mark 9 [?. 9] [92 9])
              (tab-mark   ?\t   [?\xBB ?\t] [?\\ ?\t])))
      (y/whitespace-color))
    :hook
    (prog-mode . whitespace-mode)
    (text-mode . whitespace-mode)
    (before-save . whitespace-cleanup))

  ;; theme has no hook. use advice.
#+END_SRC

** yasnippet
*YASnippet* is a template system for Emacs. It allows you to type an
abbreviation and automatically expand it into function templates. Bundled
language templates include: C, C++, C#, Perl, Python, Ruby, SQL, LaTeX,
HTML, CSS and more.

- Github: https://github.com/joaotavora/yasnippet

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :diminish yas-minor-mode
    :hook
    (prog-mode . yas-minor-mode))

  (use-package yasnippet-snippets)
#+END_SRC

* Security
** dir-locals
   :PROPERTIES:
   :CUSTOM_ID: sec-dir-locals
   :END:

#+begin_src emacs-lisp
  (require 'cc-mode)
  (require 'semantic)
  (require 'semantic/bovine/gcc)

  (setq enable-dir-local-variables t
        enable-remote-dir-locals t
        enable-local-variables :safe
        enable-local-eval t)
  ;; example: #include "dir1/file1.h"
  (defvar-local y/project-include-path nil
    "Project additional include path (double quotation).")
  ;; example: #include <dir1/file1.h>
  (defvar-local y/project-system-include-path nil
    "Project additional system include path (angle bracket).")
  (defvar-local y/project-tab-visible nil
    "Project source code show visible TAB or not.")
  (defvar-local y/project-exclude-system-path nil
    "Project use builtin system path or not. Set to nil for linux kernel.")
  (defvar-local y/project-read-only nil
    "Project set buffer to read only mode.")
  (put 'y/project-include-path 'safe-local-variable #'listp)
  (put 'y/project-system-include-path 'safe-local-variable #'listp)
  (put 'y/project-tab-visible 'safe-local-variable #'booleanp)
  (put 'y/project-exclude-system-path 'safe-local-variable #'booleanp)
  (put 'y/project-read-only 'safe-local-variable #'booleanp)

  (defconst y/semantic-c-system-include-path
    (semantic-gcc-get-include-paths "c")
    "Default system include path for C.")

  (defconst y/semantic-c++-system-include-path
    (semantic-gcc-get-include-paths "c++")
    "Default system include path for C++.")

  ;; Call if new compiler installed
  (defun y/semantic-refresh-system-include-path()
    "Refresh system include path. Almost you need not call directly."
    (interactive)
    (setq y/semantic-c-system-include-path
          (semantic-gcc-get-include-paths "c")
          y/semantic-c++-system-include-path
          (semantic-gcc-get-include-paths "c++")))

  ;; init default path
  (y/semantic-refresh-system-include-path)

  (defun y/whitespace-style-tab-visible(&optional tab-visible)
    "Set whitespace config depends on project config or TAB-VISIBLE."
    (interactive)
    (or tab-visible (setq tab-visible y/project-tab-visible))
    (when (and (or (string= major-mode "c-mode")
                   (string= major-mode "c++-mode"))
               tab-visible)
      (custom-set-faces
       '(whitespace-tab ((t (:foreground "#75715E" :background orangered4)))))))

  (defun y/project-set-config()
    "Set project include path.
  SYSTEM-INCLUDE-PATH-CLEAR nil do nothing, t clear system include path."

    (let ((de '()) ;; directory external include path
          (ds '()) ;; directory system include path
          (dl (locate-dominating-file default-directory
                                      dir-locals-file)))

      ;; reset db root
      (if dl
          (setq semanticdb-project-roots `(,dl))
        (setq semanticdb-project-roots dl))

      ;; process external include path.
      (dolist (d y/project-include-path)
        (if (stringp d)
            (progn
              (or (string-prefix-p "/" d)
                  (setq d (concat dl d)))
              (add-to-list 'de (file-truename d) t))
          (warn "y/projects: not a string include path:" d)))
      ;; Alwasys append project root directory to include path
      (and dl (add-to-list 'de (file-truename dl) t))
      ;; (setq semantic-c-dependency-system-include-path de)

      ;; process system include path.
      (dolist (d y/project-system-include-path)
        (if (stringp d)
            (progn
              (or (string-prefix-p "/" d)
                  (setq d (concat dl d)))
              (add-to-list 'ds (file-truename d) t))
          (warn "y/projects: not a string system include path:" d)))

      (setq-mode-local c-mode semantic-dependency-include-path ds)
      (setq-mode-local c++-mode semantic-dependency-include-path de)

      (unless y/project-exclude-system-path
           (if (string= major-mode "c-mode")
               (setq ds (append y/semantic-c-system-include-path ds))
             (setq ds (append y/semantic-c++-system-include-path ds))))
      (setq-mode-local c-mode semantic-dependency-system-include-path ds)
      (setq-mode-local c++-mode semantic-dependency-system-include-path ds)

      (y/whitespace-style-tab-visible)
      (when y/project-read-only
        (read-only-mode 1))

      ;; ds now add all ds and de assign to other tools.
      ;; (setq ds (append ds de))
      (setq flycheck-clang-include-path de
            flycheck-clang-includes ds
            flycheck-gcc-include-path de
            flycheck-gcc-includes ds
            company-c-headers-path-system (append de ds))
      (when (bound-and-true-p flycheck-mode)
        (flycheck-mode))))

  ;; After all, semantic-c-dependency-include-path and
  ;; semantic-dependency-include-path not work. Always use system directory
  ;; So always update system directory when buffer switched.
  (defun y/project-c-common-switch-buffer-hook(cur-buffer prev-buffer)
    "Change inlcude path when buffer switched."
    (when (or (string= major-mode "c-mode")
              (string= major-mode "c++-mode")
              t)
      (y/project-set-config)))

  (use-package switch-buffer-hook
    :diminish
    :quelpa (switch-buffer-hook :fetcher github
                 :repo "yygcode/switch-buffer-hook"
                 :stable nil)
    :init
    (switch-buffer-hook-mode))
  (add-hook 'switch-buffer-hook #'y/project-c-common-switch-buffer-hook)
#+end_src

* Project
** projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile)
#+END_SRC

* Search Engineer
** google
- google this package: [[https://github.com/Malabarba/emacs-google-this][Emacs Google This]]
#+BEGIN_SRC emacs-lisp
  (use-package google-this
    :diminish
    :bind-keymap ("C-c s g" . google-this-mode-submap)
    :hook
    (after-init . google-this-mode))
#+END_SRC

* Footer
Refer to [[#header][header]] for more details.

#+BEGIN_SRC emacs-lisp
  ;; calculate finish seconds and print
  (when (boundp 'y/time-begin-seconds)
    (defconst y/time-finish-seconds (float-time))
    (message "y/time-elapsed-time is %.3f seconds (file: %s and %s)"
             (- y/time-finish-seconds y/time-begin-seconds)
             user-init-file user-init-config)
    (unintern 'y/time-finish-seconds nil)
    (unintern 'y/time-begin-seconds nil))

  ;;; footer timestamp message
  (message "%s" (format-time-string "config.el finish %Y-%m-%d %H:%M:%S"
                                    (current-time)))

  ;;; config.el ends here
#+END_SRC

* Appendix
Gook Luck, Guys.
